# 재귀 Recursion

함수 내에서 자기 자신을 다시 호출하는 함수를 의미한다.

```java
public void Recursive(){
	System.out.println("Recursive Call");
	Recursive();
}
```

완료되지 않은 함수를 다시 호출하는 것이다.

함수가 호출되면 해당 함수의 복사본을 만들어서 실행하는 구조이다.

앞서 정의한 함수에는 한번 호출되면 계속 호출되는 문제가 있다.

`Recursive` 함수에 재귀의 `탈출조건` 이 없기 때문이다.

탈출 조건을 추가해서 완성해 본다.

```java
public class RecursiveSample {
    public static void main(String[] args){
        RecursiveSample recursiveSample = new RecursiveSample();
        recursiveSample.recursive(3);
    }
    public void recursive(int num){
        if (num <= 0) return; //탈출 조건
        System.out.println("Recursive Call");
        Recursive(num-1);
    }
}
```

탈출 조건을 구성한 Recursive 함수의 호출 과정

```java
//1
//시작
public void recursive( 3 ){
    if (num <= 0) return; //탈출 조건
    System.out.println("Recursive Call");
    Recursive(3-1);
}
```
```java
//2
public void recursive( 2 ){
    if (num <= 0) return; //탈출 조건
    System.out.println("Recursive Call");
    Recursive(2-1);
}
```

```java
//3
public void recursive( 1 ){
    if (num <= 0) return; //탈출 조건
    System.out.println("Recursive Call");
    Recursive(1-1);
}
```

```java
//4
//종료 후 탈출
public void recursive( 0 ){
    if (num <= 0) return; //탈출 조건
    System.out.println("Recursive Call");
    Recursive(...);
}
```

재귀 함수는 자료구조나 알고리즘의 **반복되는 구조를 일반화** 할 수 있는 중요한 수단이다.

무엇보다도 재귀적인 수학적 수식을 그대로 코드로 옮길 수 있다는 점에서 강력하다.

이러한 특징을 보이기 위해 팩토리얼factorial 값을 반환하는 함수를 재귀적으로 구현해 본다.

정수 n의 팩토리얼은 n!로 표시하며, 수식적 의미는 다음과 같다.

$n! = n*(n-1)*(n-2)*(n-3)*...*2*1$

따라서 3!은 3*2*1이며 5!은 5*4*3*2*1이다.

해당 수식을 코드로 풀어 쓰기 위해 일반화 과정을 거친다면 다음과 같다.

n! = n * `(n-1)!`

n! = n * (n-1) * `(n-2)!`

n! = n * (n-1) * (n-2) * `(n-3)!`

...

n! = n * (n-1) * (n-2) * (n-3) * ... * 2 * 1

팩토리얼은 결국 n이든 n-1이든 n-2든 상관없이 특정 지점을 시작으로 1씩 감소되는 값들의 곱이다.

위의 사실을 가지고 일반화를 거친 코드는 다음과 같다

```java
public class RecursiveSample {
    public static void main(String[] args){
        RecursiveSample recursiveSample = new RecursiveSample();        
        System.out.println(recursiveSample.factorial(5));
    }
    public int factorial (int n){
        if (n == 1) return 1;
        return n * factorial(n-1);
    }
}

```

탈출 조건은 파라미터로 전달 받은 n이 1이 되는 순간에 만족된다.

따라서 factorial 함수의 호출 과정은 다음과 같다.

```java
//1
//시작
public int factorial (4){
    if (n == 1) return 1;
    return 4 * factorial(4-1);
}
```

```java
//2
public int factorial (3){
    if (n == 1) return 1;
    return 3 * factorial(3-1);
}
```

```java
//3
public int factorial (2){
    if (n == 1) return 1;
    return 2 * factorial(2-1);
}
```

```java
//4
//종료 후 탈출
public int factorial (1){
    if (n == 1) return 1;
    return ...;
}
```

호출 과정을 구간 별로 끊어서 살펴보자.

시작하는 값인 n이 4라고 할 때

실제 함수가 쌓이는 과정을 살펴보면 다음과 같은 순서로 진행된다.

여기서 등호는 우변의 식이 실행되었을 때 return받는 값을 의미한다.

1. factorial(4) = 4 * factorial(3)
2. factorial(3) = 3 * factorial(2)
3. factorial(2) = 2 * factorial(1)
4. factorial(1) = 1
5. factorial(2) = 2 * 1
    - factorial(1)에서 탈출조건으로 탈출하면서 factorial(1)은 1로 치환된다.
6. factorial(3) = 3 * 2 * 1
    - factorial(2)가 종료되며 2 * 1을 리턴한다.
7. factorial(4) = 4 * 3 * 2 * 1
    - factorial(3)가 종료되며 3 * 2 * 1을 리턴한다.

임의로 구분한 7단계를 거쳐서 나타난 결과는 팩토리얼의 수학적 수식과 일치하는 것을 알 수 있다.

## 재귀의 활용

### 피보나치 수열 Fibonacci Sequence

```java
public class Main {
	public static void main(String[] args){
		Main main = new Main();
		main.fibo(7);
	}
	public int fibo (int n){
	    System.out.printf("func call param %d \n", n);
	    if (n == 1 ) return 0;
	    else if (n == 2) return 1;
	    else return fibo(n-1) + fibo(n-2);
	}
}
```

피보나치 수열의 7번째 값의 출력을 위해서도 25회의 함수호출이 동반되었다.

때문에 성능상의 불리함은 분명 존재한다. 연산자 왼쪽의 fibo함수호출이 완료되어야 비로소 오른편이 진행된다.

## 정리

재귀의 호출 순서를 명확하게 머리속에서 그리는 것은 한계가 있습니다. 그렇기 때문에 집중해야 할 부분은 반복을 할 수 있도록 쪼개는 구간과, 그 구간을 일반화하는 발상이라고 생각한다.